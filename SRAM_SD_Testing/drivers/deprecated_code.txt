// set up the dma channels appropriately, setting the initial write address for SRAM_BUFA and ADC_BUFB appropriately. note that input should be malloc pointers. 
static inline void init_dma(
    int *ADC_SRAM_CHAN,  
    int *SRAM_BUFA_CHAN, 
    int *ADC_BUFB_CHAN,
    dma_channel_config *ADC_SRAM_CONF,
    dma_channel_config *SRAM_BUFA_CONF,
    dma_channel_config *ADC_BUFB_CONF,
    sram_t *SRAM, 
    uint16_t *BUF_A, 
    uint16_t *BUF_B,
    int *BUF_SIZE) {

    // Configure DMA channel from ADC to the SRAM
    *ADC_SRAM_CHAN = dma_claim_unused_channel(true);
    *ADC_SRAM_CONF = dma_channel_get_default_config(*ADC_SRAM_CHAN);
    channel_config_set_transfer_data_size(ADC_SRAM_CONF, DMA_SIZE_16);
    channel_config_set_read_increment(ADC_SRAM_CONF, false);
    channel_config_set_write_increment(ADC_SRAM_CONF, false);
    channel_config_set_dreq(ADC_SRAM_CONF, DREQ_ADC);
    dma_channel_configure(
        *ADC_SRAM_CHAN,
        ADC_SRAM_CONF,
        &get_SPI_hw_instance(SRAM)->dr,
        &adc_hw->fifo,
        *BUF_SIZE, 
        false
    );

    // Configure DMA channel from the SRAM to buffer A
    *SRAM_BUFA_CHAN = dma_claim_unused_channel(true);
    *SRAM_BUFA_CONF = dma_channel_get_default_config(*SRAM_BUFA_CHAN);
    channel_config_set_transfer_data_size(SRAM_BUFA_CONF, DMA_SIZE_16);
    channel_config_set_read_increment(SRAM_BUFA_CONF, false);
    channel_config_set_write_increment(SRAM_BUFA_CONF, true);
    dma_channel_configure(
        *SRAM_BUFA_CHAN,
        SRAM_BUFA_CONF,
        BUF_A,
        &get_SPI_hw_instance(SRAM)->dr,
        *BUF_SIZE, 
        false
    );

    // Configure DMA channel from ADC to buffer B
    *ADC_BUFB_CHAN = dma_claim_unused_channel(true);
    *ADC_BUFB_CONF = dma_channel_get_default_config(*ADC_BUFB_CHAN);
    channel_config_set_transfer_data_size(ADC_BUFB_CONF, DMA_SIZE_16);
    channel_config_set_read_increment(ADC_BUFB_CONF, false);
    channel_config_set_write_increment(ADC_BUFB_CONF, true);
    channel_config_set_dreq(ADC_BUFB_CONF, DREQ_ADC);
    dma_channel_configure(
        *ADC_BUFB_CHAN,
        ADC_BUFB_CONF,
        &get_SPI_hw_instance(SRAM)->dr,
        &adc_hw->fifo,
        *BUF_SIZE, 
        false
    );

}

// Start SRAM->BUF_A DMA call (resetting the write pointer.) Includes running the commands for the SRAM. 
static inline void start_SRAM_BUFA_transfer(
    sram_t *SRAM,
    int *SRAM_BUFA_CHAN, 
    dma_channel_config *SRAM_BUFA_CONF,
    uint16_t *BUF_A
) {

    // set 16-bit sequential read mode for the SRAM driver 
    SRAM_start_sequential_read16(SRAM, 0);

    // start the transfer 
    dma_start_channel_mask(1u << *SRAM_BUFA_CHAN);

    // wait for it to finish before continuing 
    dma_channel_wait_for_finish_blocking(*SRAM_BUFA_CHAN);

    // finished. deselect the SRAM and change back to SPI8
    SRAM_deselect(SRAM);
    SRAM_SPI8(SRAM);

    // reset the initial write address (TODO: test if this is necessary.)
    dma_channel_set_write_addr(
    *SRAM_BUFA_CHAN,
    BUF_A,
    false
    );
    
}

// Start ADC->SRAM DMA call 
static inline void start_ADC_SRAM_transfer(
    sram_t *SRAM,
    int *ADC_SRAM_CHAN) {

    // set 16-bit sequential write mode
    SRAM_start_sequential_write16(SRAM, 0);

    // start the DMA
    dma_start_channel_mask(1u << *ADC_SRAM_CHAN);

    // wait for it to finish before continuing 
    dma_channel_wait_for_finish_blocking(*ADC_SRAM_CHAN);

    // finished. deselect the SRAM and change back to SPI8
    SRAM_deselect(SRAM);
    SRAM_SPI8(SRAM);

}
